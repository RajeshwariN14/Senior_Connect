// import mongoose from 'mongoose';

// const sessionRequestSchema = new mongoose.Schema({
//   student: {
//     type: mongoose.Schema.Types.ObjectId,
//     ref: 'User',
//     required: true
//   },

//   senior: {
//     type: mongoose.Schema.Types.ObjectId,
//     ref: 'Senior',
//     required: true
//   },

//   examType: {
//     type: String,
//     enum: ['JEE', 'CET'],
  
//   },

//   jeePercentile: {
//     type: Number,
    
//     min: 0,
//     max: 100
//   },

//   cetPercentile: {
//     type: Number,
//     min: 0,
//     max: 100
//   },

// cetScoreCardURL: {
//   type: String,
//   validate: {
//     validator: function (v) {
//       // Allow null or undefined (optional field)
//       return !v || /^https?:\/\/.+$/.test(v);
//     },
//     message: props => `${props.value} is not a valid URL!`
//   }
// },
// jeeScoreCardURL: {
//   type: String,
//   validate: {
//     validator: function (v) {
//       return !v || /^https?:\/\/.+$/.test(v);
//     },
//     message: props => `${props.value} is not a valid URL!`
//   }
// },

//   status: {
//     type: String,
//     enum: ['pending', 'confirmed'],
//     default: 'pending'
//   },

//   // Date/time when senior confirms session
//   scheduledAt: {
//     type: Date,
//   },

//   // Google Meet link generated by Calendar API
//   googleMeetLink: {
//     type: String,
//   },

//   createdAt: {
//     type: Date,
//     default: Date.now
//   }
// },{timestamps: true});

// const SessionRequest = mongoose.model('SessionRequest', sessionRequestSchema);

// export default SessionRequest;

import mongoose from 'mongoose';

const sessionRequestSchema = new mongoose.Schema({
  student: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },

  senior: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Senior',
    required: true
  },

  examType: {
    type: String,
    enum: ['JEE', 'CET'],
  
  },

  jeePercentile: {
    type: Number,
    
    min: 0,
    max: 100
  },

  cetPercentile: {
    type: Number,
    min: 0,
    max: 100
  },

cetScoreCardURL: {
  type: String,
  validate: {
    validator: function (v) {
      // Allow null or undefined (optional field)
      return !v || /^https?:\/\/.+$/.test(v);
    },
    message: props => `${props.value} is not a valid URL!`
  }
},
jeeScoreCardURL: {
  type: String,
  validate: {
    validator: function (v) {
      return !v || /^https?:\/\/.+$/.test(v);
    },
    message: props => `${props.value} is not a valid URL!`
  }
},

  status: {
    type: String,
    enum: ['pending', 'confirmed'],
    default: 'pending'
  },

  // Date/time when senior confirms session
  scheduledAt: {
    type: Date,
  },

  // Google Meet link generated by Calendar API
  googleMeetLink: {
    type: String,
  },

  createdAt: {
    type: Date,
    default: Date.now
  }
},{timestamps: true});

const SessionRequest = mongoose.model('SessionRequest', sessionRequestSchema);

export default SessionRequest;
